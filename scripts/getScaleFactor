#!/bin/bash
#########################################################################
## getScaleFactor
##
## This is a small script to use pgbench to determine where the 
## system is IObound
##
## To run a benchmark set the scalefactor
##
## For details on the technical details from this script see:
##    http://www.westnet.com/~gsmith/content/postgresql/pgbench-scaling.htm
##
## sudo apt-get install postgresql-9.1
## 
## Author:  Deron Jensen
## Date:    08/01/2013
## Email:   deron@cs.pdx.edu, fecastle@gmail.com
##
#########################################################################
DBNAME=pgbench
CLIENTS=2   # Set clients at 2x CPUs
LOGDIR=/usr/local/xen/data
PGHOST=localhost
PGUSER=postgres
export PGHOST PGUSER

. ./common.sh

function setup {
	if [ ! -d $LOGDIR ]; then
		mkdir -p $LOGDIR
	fi
	psql -d $DBNAME -c "checkpoint;" 2>/dev/null
	if [ $? != '0' ]; then
		echo "Creating DB $DBNAME"
		createdb $DBNAME 2>/dev/null
		if [ $? != '0' ]; then
			echo "Unable to create DB"
			exit 1
		fi
	fi

	echo "Dropping Caches - Start!!"
	sync
	echo 3 > /proc/sys/vm/drop_caches
	echo 0 > /proc/sys/vm/drop_caches
	echo "Dropping Caches - Complete!!"
}

# for SCALEFACTOR in 5 10 15 20 25 30 35 40 45 50; do
# INC=5
SCALEFACTOR=25
# END=50
# while [ $SCALEFACTOR -le $END ]; do
# for SCALEFACTOR in 10 25 50; do
    LOGFILE=$LOGDIR/$HOSTNAME.$SCALEFACTOR
    # echo "Init DB with Scale Factor of $SCALEFACTOR" | tee $LOGFILE
    # pgbench -i -s $SCALEFACTOR $DBNAME > /dev/null 2>&1
    # vacuumdb --analyze $DBNAME >/dev/null 2>&1
    # psql -d $DBNAME -c "checkpoint;" >/dev/null 2>&1
    # setup
    echo "Starting Test with $CLIENTS clients" | tee $LOGFILE
    vmstat 5 >> $LOGFILE &
    pgbench -T 30 -c $CLIENTS -S $DBNAME | grep tps | grep excluding >> $LOGFILE
    psql -d $DBNAME -c "SELECT relname, reltuples, relpages from PG_class WHERE relname='pgbench_accounts';" >> $LOGFILE
    # let SCALEFACTOR=$SCALEFACTOR+$INC
    killall vmstat
# done

